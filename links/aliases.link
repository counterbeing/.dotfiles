# General
alias refresh='source ~/.zshrc'
alias vi='vim'
alias ls='ls -alFG'
alias pping="ping -a 8.8.8.8"
alias ..="cd .."
alias ll="ls"
alias l="exa -lah"
alias tlf="tail -f"
alias ln='ln -v'
alias mkdir='mkdir -p'
alias ...='../..'
alias weather='curl http://wttr.in/san_francisco'
alias change_repo_to_ssh='~/.scripts/switch_repo_to_ssh.sh'

# Kubernetes
alias kgp='kubectl get pods -o wide'
alias kga='kubectl get all -o wide'
alias kd='kubectl describe'
alias ku='kubectl'
alias kl='kubectl logs'
# Run a shell in an existing pod
ke() {
  kubectl exec -it $1 -- /bin/sh
}

# Docker
# alias docker_kill_all="docker kill $(docker ps -q)"
# alias docker_remove_all="docker rm $(docker ps -a -q)"
# alias docker_remove_all_images="docker rmi $(docker images -q)"
alias com="docker compose"

alias y="yarn"


function pbj {
  jwt decode $(pbpaste)
}

#Git
alias gco='git checkout'
alias gst='git status'
alias gp="git push"
alias gphm="git push heroku master"
alias gpsm="git push staging master"
alias gppm="git push production master"
alias ggraph="git log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"
alias glol="git log --oneline --graph --decorate"
alias dif="git diff --color | diff-so-fancy | less"
alias gd="git diff --color | diff-so-fancy | less"
alias lab="https_proxy=socks5://localhost:8118 lab"
alias gpu="git pull"

alias kon="kontena"

#Rake
# This prevents zsh from doing funny things when passing rake arguments in
# braces
alias rake="noglob rake"

# I often need to remove a remote branch and replace it with my recently
# squashed changes, it's always annoying to type.
function replace_remote {
  branch=$(git symbolic-ref --short HEAD)
  git push origin :$branch
  git push origin $branch
}

# Capistrano
alias cpd="cap production deploy"
alias csd="cap staging deploy"

# Ruby
alias be="bundle exec"
alias rake="noglob bundle exec rake"
alias b="bundle"

# Mac OS X
# When airply or other audio goes wonky, this is handy.
alias reset_audio="sudo killall coreaudiod"
alias disable_gatekeeper="sudo spctl --master-disable"
alias enable_gatekeeper="sudo spctl --master-enable"
alias recent_syslog="syslog -k Time ge -24h"

#Postgres
alias pgstart='pg_ctl -l $PGDATA/server.log start'
alias pgstop='pg_ctl stop -m fast'
export PGDATA='/usr/local/var/postgres'
export PGHOST='/tmp'

# Node Webkit
alias nw="/Applications/nwjs.app/Contents/MacOS/nwjs"

# Update a bunch of things at once
function update_all {
  brew update;
  brew upgrade;
  # brew cleanup;
  mas upgrade
  omz update
  ~/.vim/update_plugins.sh
  softwareupdate --list;
}

# Run a rake task
function prake {
  rake $(rake -T | cut -f2 -d' ' | pick)
}


# Run kill -9 on a selected process
function pikill9 {
  kill -9 $(ps -e | awk '{if(NR!=3) { print $4, $1 }}' | pick -do | tail -n +2)
}

# Check out a git branch
function gpo {
  git checkout $(git branch -v | tr '*' ' ' | pick | awk '{print $1}')
  # This is to do some colors and such :)
  # git branch -v | ruby -e 'ARGF.each_line do |line|
  #   cap = line.match(/\*?\W+(\S*)\W+(\S*)\s+(.*$)/)
  #   puts "#{cap[0]} \e[34m#{cap[1]}\e[0m  \e[32m#{cap[2]}\e[0m\n"
  # end'
}

function flush_dns_cache {
  sudo dscacheutil -flushcache;sudo killall -HUP mDNSResponder;
}

# Get most recently used git branches via the reflog, then allow you to pick one
function gre {
  selected=$(
    for branch in $(git reflog | egrep -io "moving from ([^[:space:]]+)" | awk '{ print $3 }' | awk ' !x[$0]++' | head -n20); do
    if git show-branch $branch &>/dev/null
    then
      glog=$(git log $branch -1 --pretty=oneline --abbrev-commit --no-merges)
      # printf '%-30s --- \x1b[34;01m%s\x1b[39;49;00m\n' "$branch" "$glog"
      # printf '%-30s --- \e[34m%s\e[0m\n' "$branch" "$glog"
      printf '%-30s --- %s\n' "$branch" "$glog"
    fi
    done | pick
  )
  selected=$(echo "$selected" | awk '{print $1}')
  git checkout $selected
}


function serve {
  port="${1:-1337}"
  ruby -run -e httpd . -p $port
}

# Output name of last command to notification center, to let you know it completed
function tno {
  terminal-notifier -message "$(history | tail -1 | cut -d' ' -f2- | cut -d';' -f1)" -title "Command Completed" -sound 'Purr'
}

function project_replace () {
  ag -l $1 | xargs gsed -ri -e "s/$1/$2/g"
}

function whats_using {
  if [ -z $1 ]; then
    sudo lsof -iTCP -sTCP:LISTEN -n -P
  else
    sudo lsof -iTCP -sTCP:LISTEN -n -P | grep $1
  fi
}

# function randomize_mac_address {
# /usr/bin/env ruby <<-EORUBY
# used_characters = %w(0 1 2 3 4 5 6 7 8 9 a b c d e f)
# spoofed_mac = Array
#               .new(12) { used_characters.sample }
#               .each_slice(2)
#               .map(&:join)
#               .join(':')
# puts "Your new MAC address is #{spoofed_mac}"
# system("sudo ifconfig en0 ether #{spoofed_mac}")
# sleep(2)
# puts 'Restarting airport'
# system("sudo ifconfig en0 down")
# system("sudo ifconfig en0 up")
#
# EORUBY
# =======

function check_cert {
  echo | openssl s_client -showcerts -servername $1 -connect $1:443 2>/dev/null | openssl x509 -inform pem -noout -text
}

function notif {
  terminal-notifier -message 'done' -ignoreDnD -sound 'pop' -group 'notif'
}

function watch_wifi {
  clear; while x=1; do /System/Library/PrivateFrameworks/Apple80211.framework/Versions/Current/Resources/airport -I | 
  grep CtlRSSI | 
  sed -e 's/^.*://g' | 
  xargs -I SIGNAL printf "\rRSSI dBm: SIGNAL"; 
  sleep 0.5; done
}

function git_match_upstream {
  CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
  git branch --set-upstream-to=origin/$CURRENT_BRANCH $CURRENT_BRANCH
}


